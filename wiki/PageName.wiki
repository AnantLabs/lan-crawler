#summary Pinger design specification for the lan-crawler project
#labels Phase-Implementation,Phase-Design

= Introduction =

The lan-crawler project needs a simple pinger, it's implementation details are described here.

== Overview ==

== Goal == 

The end result is to have a maximally up-to-date list of LAN machines that are currently online.

== Logical walkthrough ==

The pinger is largely parallelized, and consists of these logical steps:

  # Create a list of machines to ping given the IP Ranges of interest
  # Schedule ping tasks to an executing schedule pool
  # Save the current ping results into a repository.
  # Update the repository as needed with the given timelapse.

== Implementation == 

To perform these tasks, the pinger consists of these parts:

  * Repository for IP ranges to be pinged: *IIPRangesRepository*
  * Repository of lan machines, used for storing the ping results: *ILanHostsRepository*
  * Managing class that starts and creates pinger tasks to the task scheduler: *IPinger*
  * Task scheduler and/or thread pool that execute tasks: *ITaskExecutor*
  * Class that performs the concrete ping: *PingTask*

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages

{{{
interface IIPRangesRepository : IList
{
    Save();
    Add(IPRange range);
    Add(IPRanges ranges);
    this[] {get; set; }
    Remove(int index);
}
}}}